// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Modelo de Usuários (NOVO)
model Usuario {
  id        String    @id @default(cuid())
  nome      String    @unique // Nome de usuário para login
  email     String    @unique
  senha     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relacionamentos
  empresas  Empresa[]

  @@map("usuarios")
}

// Modelo principal de Empresas (Multi-tenancy)
model Empresa {
  id          String   @id @default(cuid())
  nome        String   @unique
  cnpj        String?  @unique
  ativo       Boolean  @default(true)
  config      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usuarioId   String   // Chave estrangeira para o usuário dono

  // Relacionamentos
  clientes    Cliente[]
  lavadores   Lavador[]
  servicos    Servico[]
  adicionais  Adicional[]
  ordens      OrdemServico[]
  pagamentos  Pagamento[]
  tipoVeiculos TipoVeiculo[]
  usuario     Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("empresas")
}

// Modelo de Clientes
model Cliente {
  id        String   @id @default(cuid())
  empresaId String
  nome      String
  telefone  String?
  email     String?  @unique
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  empresa   Empresa   @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  veiculos  Veiculo[]
  ordens    OrdemServico[]

  @@map("clientes")
}

// Modelo de Veículos
model Veiculo {
  id        String   @id @default(cuid())
  clienteId String
  placa     String   @unique
  modelo    String?
  cor       String?
  ano       Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  cliente   Cliente        @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  ordens    OrdemServico[]

  @@map("veiculos")
}

// Modelo de Lavadores
model Lavador {
  id          String   @id @default(cuid())
  empresaId   String
  nome        String
  comissao    Float    // Porcentagem de comissão (ex: 15.5 para 15.5%)
  ativo       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  empresa    Empresa        @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  ordens     OrdemServico[]

  @@map("lavadores")
}

// Modelo de Tipos de Veículo (NOVO)
model TipoVeiculo {
  empresaId   String
  id          String   @id @default(cuid())
  nome        String   // "Carro", "Moto", "Outros"
  categoria   String?  // "Hatch", "Sedan", "SUV", "Picapé", "Caminhonete"
  descricao   String?  // Descrição opcional
  ativo       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  servicos    Servico[]
  empresa     Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  
  @@unique([empresaId, nome, categoria])
  @@map("tipo_veiculos")
}

// Modelo de Serviços de Lavagem (MODIFICADO)
model Servico {
  id            String   @id @default(cuid())
  empresaId     String
  nome          String
  descricao     String?
  preco         Float
  duracao       Int?     // Duração em minutos
  ativo         Boolean  @default(true)
  tipoVeiculoId String?  @map("tipo_veiculo_id")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  empresa     Empresa          @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  tipoVeiculo TipoVeiculo?     @relation(fields: [tipoVeiculoId], references: [id])
  ordemItems  OrdemServicoItem[]

  @@map("servicos")
}

// Modelo de Serviços Adicionais
model Adicional {
  id          String   @id @default(cuid())
  empresaId   String
  nome        String
  descricao   String?
  preco       Float
  ativo       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  empresa    Empresa              @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  ordemItems OrdemServicoItem[]

  @@map("adicionais")
}

// Modelo Principal de Ordens de Serviço
model OrdemServico {
  id          String           @id @default(cuid())
  empresaId   String
  clienteId   String
  veiculoId   String
  lavadorId   String?
  status      OrdemStatus      @default(PENDENTE)
  valorTotal  Float
  observacoes String?
  dataInicio  DateTime?
  dataFim     DateTime?
  pago        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relacionamentos
  empresa   Empresa             @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  cliente   Cliente             @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  veiculo   Veiculo             @relation(fields: [veiculoId], references: [id], onDelete: Cascade)
  lavador   Lavador?             @relation(fields: [lavadorId], references: [id], onDelete: Cascade)
  items     OrdemServicoItem[]
  pagamentos Pagamento[]

  @@map("ordens_servico")
}

// Modelo de Itens da Ordem de Serviço
model OrdemServicoItem {
  id          String                  @id @default(cuid())
  ordemId     String
  tipo        OrdemItemType
  servicoId   String?
  adicionalId String?
  quantidade  Int                     @default(1)
  precoUnit   Float
  subtotal    Float
  createdAt   DateTime                @default(now())

  // Relacionamentos
  ordem      OrdemServico @relation(fields: [ordemId], references: [id], onDelete: Cascade)
  servico    Servico?     @relation(fields: [servicoId], references: [id], onDelete: Cascade)
  adicional  Adicional?   @relation(fields: [adicionalId], references: [id], onDelete: Cascade)

  @@map("ordens_servico_items")
}

// Modelo de Pagamentos
model Pagamento {
  id          String           @id @default(cuid())
  ordemId     String
  empresaId   String
  metodo      MetodoPagamento
  valor       Float
  status      StatusPagamento  @default(PENDENTE)
  observacoes String?
  pagoEm      DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relacionamentos
  ordem   OrdemServico @relation(fields: [ordemId], references: [id], onDelete: Cascade)
  empresa Empresa     @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@map("pagamentos")
}

// Enums
enum OrdemStatus {
  PENDENTE
  EM_ANDAMENTO
  FINALIZADO
  CANCELADO
}

enum OrdemItemType {
  SERVICO
  ADICIONAL
}

enum MetodoPagamento {
  DINHEIRO
  PIX
  CARTAO
  PENDENTE
}

enum StatusPagamento {
  PENDENTE
  PAGO
  CANCELADO
}
