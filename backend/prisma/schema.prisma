// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"  
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:c:/LinaX/backend/prisma/dev.db"
}

// Modelo de Usuários (NOVO)
model Usuario {
  id        String    @id @default(cuid())
  nome      String    @unique // Nome de usuário para login
  email     String    @unique
  senha     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relacionamentos
  empresas  Empresa[]

  @@map("usuarios")
}

// Modelo principal de Empresas (Multi-tenancy)
model Empresa {
  id               String            @id @default(cuid())
  nome             String            @unique
  cnpj             String?           @unique
  ativo            Boolean           @default(true)
  config           Json?
  horarioAbertura  String?
  horarioFechamento String?
  finalizacaoAutomatica Boolean?       @default(false)
  exigirLavadorParaFinalizar Boolean? @default(false)
  paginaInicialPadrao String? @default("index.html")
  notificationPreferences Json?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  usuarioId        String // Chave estrangeira para o usuário dono
  // Relacionamentos
  clientes         Cliente[]
  lavadores        Lavador[]
  servicos         Servico[]
  adicionais       Adicional[]
  adiantamentos    Adiantamento[]
  ordens           OrdemServico[]
  pagamentos       Pagamento[]
  tipoVeiculos     TipoVeiculo[]
  fornecedores     Fornecedor[]
  fechamentosCaixa FechamentoCaixa[]
  caixaRegistros   CaixaRegistro[]
  fechamentosComissao FechamentoComissao[]
  usuario          Usuario           @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  notificacoes     Notificacao[]

  @@map("empresas")
}

// Modelo de Notificações (NOVO)
model Notificacao {
  id        String   @id @default(cuid())
  empresaId String
  mensagem  String
  lida      Boolean  @default(false)
  type      String   @default("info") // 'ordemCriada', 'ordemEditada', 'finalizacaoAutomatica', etc.
  link      String?
  createdAt DateTime @default(now())

  empresa   Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@map("notificacoes")
}

// Modelo de Clientes
model Cliente {
  id        String   @id @default(cuid())
  empresaId String
  nome      String
  telefone  String?
  email     String?  @unique
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  empresa  Empresa        @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  veiculos Veiculo[]
  ordens   OrdemServico[]

  @@map("clientes")
}

// Modelo de Veículos
model Veiculo {
  id        String   @id @default(cuid())
  clienteId String
  placa     String   @unique
  modelo    String?
  cor       String?
  ano       Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  cliente Cliente        @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  ordens  OrdemServico[]

  @@map("veiculos")
}

// Modelo de Lavadores
model Lavador {
  id             String          @id @default(cuid())
  empresaId      String
  nome           String
  comissao       Float // Porcentagem de comissão (ex: 15.5 para 15.5%)
  ativo          Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  // Relacionamentos
  empresa        Empresa         @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  ordens         OrdemServico[]
  caixaRegistros CaixaRegistro[]
  adiantamentos  Adiantamento[]
  fechamentosComissao FechamentoComissao[]

  @@unique([nome, empresaId])
  @@map("lavadores")
}

// Modelo de Fornecedores (NOVO PARA CAIXA)
model Fornecedor {
  id            String          @id @default(cuid())
  empresaId     String
  nome          String
  cnpj          String?
  telefone      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  empresa       Empresa         @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  caixaRegistro CaixaRegistro[]

  @@unique([empresaId, nome])
  @@map("fornecedores")
}

// Modelo de Fechamento de Caixa (NOVO)
model FechamentoCaixa {
  id             String           @id @default(cuid())
  empresaId      String
  data           DateTime         @default(now())
  faturamentoDia Float
  pix            Float
  dinheiro       Float
  cartao         Float
  diferenca      Float            @default(0)
  status         StatusFechamento @default(PENDENTE)
  observacao     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@map("fechamentos_caixa")
}

// Modelo de Registros de Caixa (Saídas, Sangrias) (NOVO)
model CaixaRegistro {
  id             String         @id @default(cuid())
  empresaId      String
  tipo           TipoCaixa      @default(SAIDA)
  data           DateTime       @default(now())
  valor          Float
  formaPagamento FormaPagamento
  fornecedorId   String?
  lavadorId      String? // Para vales
  descricao      String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  empresa    Empresa    @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  fornecedor Fornecedor? @relation(fields: [fornecedorId], references: [id])
  lavador    Lavador?   @relation(fields: [lavadorId], references: [id], onDelete: SetNull)

  // Relacionamento com Adiantamento
  adiantamento Adiantamento?
}

// Modelo de Tipos de Veículo (NOVO)
model TipoVeiculo {
  empresaId String
  id        String   @id @default(cuid())
  nome      String // "Carro", "Moto", "Outros"
  categoria String? // "Hatch", "Sedan", "SUV", "Picapé", "Caminhonete"
  descricao String? // Descrição opcional
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  servicos Servico[]
  empresa  Empresa   @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@unique([empresaId, nome, categoria])
  @@map("tipo_veiculos")
}

// Modelo de Serviços de Lavagem (MODIFICADO)
model Servico {
  id         String   @id @default(cuid())
  empresaId  String
  nome       String
  descricao  String?
  preco      Float
  duracao    Int? // Duração em minutos
  ativo      Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relacionamentos
  empresa      Empresa            @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  tiposVeiculo TipoVeiculo[] // Relação Muitos-para-Muitos
  ordemItems   OrdemServicoItem[]

  @@map("servicos")
}

// Modelo de Serviços Adicionais
model Adicional {
  id        String   @id @default(cuid())
  empresaId String
  nome      String
  descricao String?
  preco     Float
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  empresa    Empresa            @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  ordemItems OrdemServicoItem[]

  @@map("adicionais")
}

// Modelo Principal de Ordens de Serviço
model OrdemServico {
  id          String      @id @default(cuid())
  numeroOrdem Int
  empresaId   String
  clienteId   String
  veiculoId   String
  lavadorId   String?
  status      OrdemStatus @default(PENDENTE)
  valorTotal  Float
  observacoes String?
  dataInicio  DateTime?
  dataFim     DateTime?
  pago        Boolean     @default(false)
  comissao    Float       @default(0)
  comissaoPaga Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relacionamentos
  empresa    Empresa            @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  cliente    Cliente            @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  veiculo    Veiculo            @relation(fields: [veiculoId], references: [id], onDelete: Cascade) // Manter Cascade para consistência
  lavador    Lavador?           @relation(fields: [lavadorId], references: [id], onDelete: SetNull)
  items      OrdemServicoItem[]
  pagamentos Pagamento[]
  
  fechamentoComissaoId String?
  fechamentoComissao   FechamentoComissao? @relation(fields: [fechamentoComissaoId], references: [id])

  @@unique([empresaId, numeroOrdem])
  @@map("ordens_servico")
}

// Modelo de Itens da Ordem de Serviço
model OrdemServicoItem {
  id          String        @id @default(cuid())
  ordemId     String
  tipo        OrdemItemType
  servicoId   String?
  adicionalId String?
  quantidade  Int           @default(1)
  precoUnit   Float
  subtotal    Float
  createdAt   DateTime      @default(now())

  // Relacionamentos
  ordem     OrdemServico @relation(fields: [ordemId], references: [id], onDelete: Cascade)
  servico   Servico?     @relation(fields: [servicoId], references: [id], onDelete: Cascade)
  adicional Adicional?   @relation(fields: [adicionalId], references: [id], onDelete: Cascade)

  @@map("ordens_servico_items")
}

// Modelo de Pagamentos
model Pagamento {
  id          String          @id @default(cuid())
  ordemId     String
  empresaId   String
  metodo      MetodoPagamento
  valor       Float
  status      StatusPagamento @default(PENDENTE)
  observacoes String?
  pagoEm      DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relacionamentos
  ordem   OrdemServico @relation(fields: [ordemId], references: [id], onDelete: Cascade)
  empresa Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  @@map("pagamentos")
}

// Enums
enum OrdemStatus {
  PENDENTE
  EM_ANDAMENTO
  FINALIZADO
  CANCELADO
}

enum OrdemItemType {
  SERVICO
  ADICIONAL
}

enum MetodoPagamento {
  DINHEIRO
  PIX
  CARTAO
  PENDENTE
}

enum TipoCaixa {
  FECHAMENTO
  SAIDA
  SANGRIA
}

enum FormaPagamento {
  DINHEIRO
  PIX
  CARTAO
  VALE
  NA
}

enum StatusPagamento {
  PENDENTE
  PAGO
  CANCELADO
}

enum StatusFechamento {
  PENDENTE
  CONFERIDO
  DIVERGENTE
}

model Adiantamento {
  id        String   @id @default(cuid())
  valor     Float
  data      DateTime @default(now())
  status    String   @default("PENDENTE") // PENDENTE, QUITADO

  lavadorId String
  lavador   Lavador  @relation(fields: [lavadorId], references: [id])

  empresaId String
  empresa   Empresa  @relation(fields: [empresaId], references: [id])

  // Relacionamento com o registro de caixa que gerou a saída
  caixaRegistroId String?       @unique
  caixaRegistro   CaixaRegistro? @relation(fields: [caixaRegistroId], references: [id])
  
  fechamentoComissaoId String?
  fechamentoComissao   FechamentoComissao? @relation(fields: [fechamentoComissaoId], references: [id])

  @@map("adiantamentos")
}

model FechamentoComissao {
  id        String   @id @default(cuid())
  data      DateTime @default(now())
  valorPago Float
  
  empresaId String
  empresa   Empresa @relation(fields: [empresaId], references: [id])

  lavadorId String
  lavador   Lavador @relation(fields: [lavadorId], references: [id])

  // Relacionamentos com os itens que foram pagos/quitados neste fechamento
  ordensPagas     OrdemServico[]
  adiantamentosQuitados Adiantamento[]

  @@map("fechamentos_comissao")
}
